
           Паттерн "Шаблонный метод":
           Цель: Определение основы класса и создание возможности подкласса
                 переопределять его части.
                 Паттерн позволяет подклассам переопределять шаги алгоритма,
                 не меняя его общей структуры.

           Реализация паттерна "Шаблонный метод":
            1) Изучить алгоритм и подумать, можно ли его разбить на шаги.
               Какие шаги будут стандартными для всех вариаций алгоритма, а какие — изменяющимися.
            2) Создать абстрактный базовый класс. Определить в нём шаблонный метод.
               Этот метод должен состоять из вызовов шагов алгоритма.
               Имеет смысл сделать шаблонный метод финальным, чтобы подклассы не могли переопределить его.
            3) Добавить в абстрактный класс методы для каждого из шагов алгоритма.
               Можно сделать эти методы абстрактными или добавить какую-то реализацию по умолчанию.
               В первом случае все подклассы должны будут реализовать эти методы,
               а во втором — только если реализация шага в подклассе отличается от стандартной версии.
            4) Подумать о введении в алгоритм хуков. Чаще всего, хуки располагают между основными шагами алгоритма,
               а также до и после всех шагов.
            5) Создать конкретные классы, унаследовав их от абстрактного класса.
               Реализовать в них все недостающие шаги и хуки.

           Применимость:
            1) Когда подклассы должны расширять базовый алгоритм, не меняя его структуры.
               1.1) Шаблонный метод позволяет подклассам расширять определённые шаги алгоритма через наследование,
                    не меняя при этом структуру алгоритмов, объявленную в базовом классе.
            2) Когда у вас есть несколько классов, делающих одно и то же с незначительными отличиями.
               Если вы редактируете один класс, то приходится вносить такие же правки и в остальные классы.
               2.1) Паттерн шаблонный метод предлагает создать для похожих классов общий суперкласс
                    и оформить в нём главный алгоритм в виде шагов. Отличающиеся шаги можно переопределить в подклассах.
               2.2) Это позволит убрать дублирование кода в нескольких классах с похожим поведением,
                    но отличающихся в деталях.

