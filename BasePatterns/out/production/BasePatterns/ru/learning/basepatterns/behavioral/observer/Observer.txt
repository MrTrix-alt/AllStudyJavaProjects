
           Паттерн "Наблюдатель":
           Цель: Определение зависимости "один ко многим" между объектами.

           Реализация паттерна "Наблюдатель":
            1) Разбить функциональность на две части:
               независимое ядро и опциональные зависимые части.
               Независимое ядро станет издателем. Зависимые части станут подписчиками.
            2) Создать интерфейс подписчиков. Обычно в нём достаточно определить единственный метод оповещения.
            3) Создать интерфейс издателей и описать в нём операции управления подпиской.
               Помнить, что издатель должен работать только с общим интерфейсом подписчиков.
            4) Нужно решить, куда поместить код ведения подписки, ведь он обычно бывает одинаков
               для всех типов издателей. Самый очевидный способ — вынести этот код в промежуточный абстрактный класс,
               от которого будут наследоваться все издатели.
               4.1) Но если  интегририровать паттерн в существующие классы, то создать новый базовый класс
                    может быть затруднительно. В этом случае можно поместить логику подписки
                    во вспомогательный объект и делегировать ему работу из издателей.
            5) Создать классы конкретных издателей. Реализовать их так, чтобы после каждого изменения
               состояния они отправляли оповещения всем своим подписчикам.
            6) Реализовать метод оповещения в конкретных подписчиках. Предусмотреть параметры, через которые
               издатель мог бы отправлять какие-то данные, связанные с происшедшим событием.
               6.1) Возможен и другой вариант, когда подписчик, получив оповещение,
                    сам возьмёт из объекта издателя нужные данные. Но в этом случае мы будем вынуждены
                    привязать класс подписчика к конкретному классу издателя.
            7) Клиент должен создавать необходимое количество объектов подписчиков и подписывать их у издателей.

           Применимость:
            1) Когда после изменения состояния одного объекта требуется что-то сделать в других,
               но мы не знаем наперёд, какие именно объекты должны отреагировать.
               1.1) Описанная проблема может возникнуть при разработке библиотек пользовательского интерфейса,
                    когда нам надо дать возможность сторонним классам реагировать на клики по кнопкам.
               1.2) Паттерн Наблюдатель позволяет любому объекту с интерфейсом подписчика
                    зарегистрироваться на получение оповещений о событиях, происходящих в объектах-издателях.
            2) Когда одни объекты должны наблюдать за другими, но только в определённых случаях.
               2.1) Издатели ведут динамические списки. Все наблюдатели могут подписываться
                    или отписываться от получения оповещений прямо во время выполнения программы.

