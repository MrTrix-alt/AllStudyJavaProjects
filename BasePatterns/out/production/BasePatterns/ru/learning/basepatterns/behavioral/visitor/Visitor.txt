
           Паттерн "Посетитель":
           Цель: Описание действий, которые выполняются с каждым объектом в некоторой структуре, и
                 добавление новых действий без изменения классов этих объектов.

           Реализация паттерна "Посетитель":
            1) Создать интерфейс посетителя и объявить в нём методы «посещения»
               для каждого класса элемента, который существует в программе.
            2) Описать интерфейс элементов. Если мы работаем с уже существующими классами,
               то объявить абстрактный метод принятия посетителей в базовом классе иерархии элементов.
            3) Реализовать методы принятия во всех конкретных элементах.
               Они должны переадресовывать вызовы тому методу посетителя,
               в котором тип параметра совпадает с текущим классом элемента.
            4) Иерархия элементов должна знать только о базовом интерфейсе посетителей.
               С другой стороны, посетители будут знать обо всех классах элементов.
            5) Для каждого нового поведения создать конкретный класс посетителя.
               Приспособить это поведение для работы со всеми типами элементов,
               реализовав все методы интерфейса посетителей.
               5.1) Можно столкнуться с ситуацией, когда посетителю нужен будет доступ к приватным полям элементов.
                    В этом случае вы можно либо раскрыть доступ к этим полям, нарушив инкапсуляцию элементов,
                    либо сделать класс посетителя вложенным в класс элемента.
            6) Клиент будет создавать объекты посетителей, а затем передавать их элементам, используя метод принятия.

           Применимость:
            1) Когда нужно выполнить какую-то операцию над всеми элементами
               сложной структуры объектов, например, деревом.
               1.1) Посетитель позволяет применять одну и ту же операцию к объектам различных классов.
            2) Когда над объектами сложной структуры объектов надо выполнять некоторые не связанные
                между собой операции, но не стоит «засорять» классы такими операциями.
               2.1) Посетитель позволяет извлечь родственные операции из классов, составляющих структуру объектов,
                    поместив их в один класс-посетитель. Если структура объектов является общей для нескольких приложений,
                    то паттерн позволит в каждое приложение включить только нужные операции.
            3) Когда новое поведение имеет смысл только для некоторых классов из существующей иерархии.
               3.1) Посетитель позволяет определить поведение только для этих классов, оставив его пустым
                    для всех остальных.

