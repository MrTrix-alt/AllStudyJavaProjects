
           Паттерн "Одиночка":
           Цель: Создать класс, у которого есть только один экземпляр (1),
                 к которому предоставляется глобальная точка доступа(2).

           Одиночка решает сразу две проблемы, нарушая принцип единственной ответственности класса:

           1) Гарантирует наличие единственного экземпляра класса.
              Чаще всего это полезно для доступа к какому-то общему ресурсу, например, базе данных.

           2) Предоставляет глобальную точку доступа. Это не просто глобальная переменная,
              через которую можно достучаться к определённому объекту.
              Глобальные переменные не защищены от записи, поэтому любой код может подменять их значения без вашего ведома.

           Реализация паттерна "Одиночка":
            Все реализации одиночки сводятся к тому, чтобы скрыть конструктор по умолчанию
            и создать публичный статический метод, который и будет контролировать жизненный цикл объекта-одиночки.
            Статический метод должен перекрывать конструктор класса, чтобы было возможность создавать экземпляр
            этого класса только через статический метод.

           Применимость:
            1) Когда в программе должен быть единственный экземпляр какого-то класса,
            доступный всем клиентам (например, общий доступ к базе данных из разных частей программы).
            Одиночка скрывает от клиентов все способы создания нового объекта, кроме специального метода.
            Этот метод либо создаёт объект, либо отдаёт существующий объект, если он уже был создан.
            2) Когда нужно иметь больше контроля над глобальными переменными.
               В отличие от глобальных переменных, Одиночка гарантирует,
               что никакой другой код не заменит созданный экземпляр класса,
               поэтому вы всегда уверены в наличии лишь одного объекта-одиночки.
               Тем не менее, в любой момент вы можете расширить это ограничение и
               позволить любое количество объектов-одиночек, поменяв код в одном месте