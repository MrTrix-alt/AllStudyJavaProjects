
           Паттерн "Прототип":
           Цель: Создать интерфейс, который имеет один единственный метод copy()/clone(), позволяющий
                 создать объект, являющийся копией самого себя.

           Реализация паттерна "Одиночка":
            Реализация этого метода в разных классах очень схожа. Метод создаёт новый объект текущего класса
            и копирует в него значения всех полей собственного объекта. Так получится скопировать даже приватные поля,
            так как большинство языков программирования разрешает доступ к приватным полям любого объекта текущего класса.

            Объект, который копируют, называется прототипом (откуда и название паттерна).
            Когда объекты программы содержат сотни полей и тысячи возможных конфигураций,
            прототипы могут служить своеобразной альтернативой созданию подклассов.

           Применимость:
            1) Когда код не должен зависеть от классов копируемых объектов.сса,
            доступный всем клиентам (например, общий доступ к базе данных из разных частей программы).
            Одиночка скрывает от клиентов все способы создания нового объекта, кроме специального метода.
            Этот метод либо создаёт объект, либо отдаёт существующий объект, если он уже был создан.
            2) Когда имеет много подклассов, которые отличаются начальными значениями полей.
               Кто-то мог создать все эти классы, чтобы иметь возможность легко порождать объекты
               с определённой конфигурацией.
               Таким образом, вместо порождения объектов из подклассов, можно копировать существующие объекты-прототипы,
               в которых уже настроено внутреннее состояние. Это позволит избежать взрывного роста количества классов
               в программе и уменьшить её сложность.