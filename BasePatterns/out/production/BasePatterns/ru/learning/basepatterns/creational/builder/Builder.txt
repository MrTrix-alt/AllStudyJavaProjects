
           Паттерн "Строитель":
           Цель: Создать абстрактный класс/интерфейс, который позволяет создавать сложные объекты пошагово.
                 Строитель даёт возможность использовать один и тот же код строительства
                 для получения разных представлений объектов.

           Паттерн предлагает разбить процесс конструирования объекта на отдельные шаги.
           Чтобы создать объект, нужно поочерёдно вызывать методы строителя.
           Причём не нужно запускать все шаги, а только те, что нужны
           для производства объекта определённой конфигурации.

           Реализация паттерна "Строитель":
            1) Убедится в том, что создание разных представлений объекта
               можно свести к общим шагам.
            2) Опишите эти шаги в общем интерфейсе строителей.
            3) Для каждого из представлений объекта-продукта создаем по одному классу-строителю
               и реализуем их методы строительства.
            4) Определяем метод получения результата.
               Обычно конкретные строители определяют собственные методы получения результата строительства.
               Нельзя описать эти методы в интерфейсе строителей, поскольку продукты не обязательно должны
               иметь общий базовый класс или интерфейс.
               Но всегда можно добавить метод получения результата в общий интерфейс,
               если строители производят однородные продукты с общим предком.
            5) Можно создать класс Director.
               Его методы будут создавать различные конфигурации продуктов,
               вызывая разные шаги одного и того же строителя.
            6) Клиентский код должен будет создавать и объекты строителей, и объект директора.
               Перед началом строительства клиент должен связать определённого строителя с директором.
               Это можно сделать либо через конструктор, либо через сеттер,
               либо подав строителя напрямую в строительный метод директора.
            7) Результат строительства можно вернуть из директора, но только если метод возврата продукта
               удалось поместить в общий интерфейс строителей.
               Однако директор жестко привяжется к конкретным классам строителей.

           Применимость:
            1) Когда нужно избавиться от «телескопического конструктора».
            2) Когда код должен создавать разные представления какого-то объекта
            3) Когда нужно собирать сложные составные объекты, например, деревья Компоновщика.
