
           Паттерн "Мост":
           Цель: Создать интерфейс, который позволит разделить класс
                 на абстракцию и реализацию, позволяя изменять их независимо друг от друга.

           Реализация паттерна "Мост":
            1) Определите, существует ли в ваших классах два непересекающихся измерения.
               Это может быть функциональность/платформа, предметная-область/инфраструктура,
               фронт-энд/бэк-энд или интерфейс/реализация.
            2) Продумать, какие операции будут нужны клиентам, и описать их в базовом классе абстракции.
            3) Определить поведения, доступные на всех платформах, и выделить из них ту часть, которая нужна абстракции.
               На основании этого опишите общий интерфейс реализации.
            4) Для каждой платформы создать свой класс конкретной реализации.
               Все они должны следовать общему интерфейсу, который мы выделили перед этим.
            5) Добавить в класс абстракции ссылку на объект реализации.
               Реализовать методы абстракции, делегируя основную работу связанному объекту реализации.
            6) Если есть несколько вариаций абстракции, создать для каждой из них свой подкласс.
            7) Клиент должен подать объект реализации в конструктор абстракции, чтобы связать их воедино.
               После этого он может свободно использовать объект абстракции, забыв о реализации.

           Применимость:
            1) Когда необходимо разделить монолитный класс,
               который содержит несколько различных реализаций какой-то функциональности
               (например, если класс может работать с разными системами баз данных).
               Мост позволяет разделить монолитный класс на несколько отдельных иерархий.
               После этого вы можете менять их код независимо друг от друга.
            2) Когда класс нужно расширять в двух независимых плоскостях.
               Мост предлагает выделить одну из таких плоскостей в отдельную иерархию классов,
               храня ссылку на один из её объектов в первоначальном классе.
            3) Когда нужно, чтобы реализацию можно было бы изменять во время выполнения программы.
               Мост позволяет заменять реализацию даже во время выполнения программы,
               так как конкретная реализация не «вшита» в класс абстракции.