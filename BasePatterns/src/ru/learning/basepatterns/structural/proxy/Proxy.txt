
           Паттерн "Заместитель":
           Цель: Создать класс, который позволяет использовать
                 разделяемые объекты сразу в нескольких контекстах.
                 Данный паттерн используется преимущественно для оптимизации работы с памятью.

           Реализация паттерна "Заместитель":
            1) Определить интерфейс, который бы сделал заместитель
               и оригинальный объект взаимозаменяемыми.
            2) Создать класс заместителя. Он должен содержать ссылку на сервисный объект.
               Чаще всего, сервисный объект создаётся самим заместителем.
               В редких случаях заместитель получает готовый сервисный
               объект от клиента через конструктор.
            3) Реализовать методы заместителя в зависимости от его предназначения.
               В большинстве случаев, проделав какую-то полезную работу, методы
               заместителя должны передать запрос сервисному объекту.
            4) Можно ввести фабрику, которая решала бы,
               какой из объектов создавать — заместитель или реальный сервисный объект.
               Но! -  эта логика может быть помещена
               в создающий метод самого заместителя.
            5) Попробовать реализовать ленивую инициализацию
               сервисного объекта при первом обращении клиента к методам заместителя

           Применимость:
            1) Ленивая инициализация (виртуальный прокси).
               Когда есть тяжёлый объект, грузящий данные из файловой системы или базы данных.
               1.1) Вместо того, чтобы грузить данные сразу после старта программы,
                    можно сэкономить ресурсы и создать тяжелый объект тогда, когда он действительно понадобится.
            2) Защита доступа (защищающий прокси). Когда в программе есть разные типы пользователей,
               и вам нужно защитить объект от неавторизованного доступа.
               Например, если ваши объекты — это важная часть операционной системы,
               а пользователи — сторонние программы (хорошие или вредоносные).
               2.1) Прокси может проверять доступ при каждом вызове
                    и передавать выполнение служебному объекту, если доступ разрешён.
            3) Локальный запуск сервиса (удалённый прокси).
               Когда настоящий сервисный объект находится на удалённом сервере.
               3.1) В этом случае заместитель транслирует запросы клиента
                в вызовы по сети в протоколе, понятном удалённому сервису.
            4)  Логирование запросов (логирующий прокси).
                Когда требуется хранить историю обращений к сервисному объекту.
               4.1) Заместитель может сохранять историю обращения клиента к сервисному объекту.
            5) Кеширование объектов («умная» ссылка).
               Когда нужно кешировать результаты запросов клиентов и управлять их жизненным циклом.
               5.1) Заместитель может подсчитывать количество ссылок на сервисный объект,
                    которые были отданы клиенту и остаются активными. Когда все ссылки освобождаются,
                    можно будет освободить и сам сервисный объект (например, закрыть подключение к базе данных).