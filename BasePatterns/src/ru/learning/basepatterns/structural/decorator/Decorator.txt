
           Паттерн "Декоратор":
           Цель: Создать базовый класс-декоратор, который позволяет динамически добавлять
                 объектам новую функциональность, оборачивая их в полезные «обёртки».

           Реализация паттерна "Декоратор":
            1) Убедится, что в задаче есть один основной компонент
               и несколько опциональных дополнений или надстроек над ним.
            2) Создать интерфейс компонента, который описывал бы общие методы как для основного компонента,
               так и для его дополнений.
            3) Создать класс конкретного компонента и поместить в него основную бизнес-логику.
            4) Создать базовый класс декораторов. Он должен иметь поле для хранения ссылки
               на вложенный объект-компонент. Все методы базового декоратора должны
               делегировать действие вложенному объекту.
            5) И конкретный компонент, и базовый декоратор должны следовать одному и тому же интерфейсу компонента.
            6) Создать классы конкретных декораторов, наследуя их от базового декоратора.
               Конкретный декоратор должен выполнять свою добавочную функцию,
               а затем (или перед этим) вызывать эту же операцию обёрнутого объекта.
            7) Клиент берёт на себя ответственность за конфигурацию и порядок обёртывания объектов.

           Применимость:
            1) Когда необходимо добавлять обязанности объектам на лету, незаметно для кода, который их использует.
                Объекты помещают в обёртки, имеющие дополнительные поведения.
                Обёртки и сами объекты имеют одинаковый интерфейс,
                поэтому клиентам без разницы, с чем работать — с обычным объектом данных или с обёрнутым.
            2) Когда нельзя расширить обязанности объекта с помощью наследования.
               Например, когда класс основной класс объявлен как завершенный.
               В данном случае поможет паттерн Декоратор для добавления новых функций объекту.