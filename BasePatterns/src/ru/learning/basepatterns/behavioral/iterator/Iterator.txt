
           Паттерн "Итератор":
           Цель: Создать интерфейс, который даёт возможность последовательно
                 обходить элементы составных объектов, не раскрывая их внутреннего представления.

           Реализация паттерна "Итератор":
            1) Создать общий интерфейс итераторов.
               Обязательный минимум — это операция получения следующего элемента коллекции.
               Но для удобства можно предусмотреть и другое.
            2) Создать интерфейс коллекции и описать в нём метод получения итератора.
               Важно, чтобы сигнатура метода возвращала общий интерфейс итераторов,
               а не один из конкретных итераторов.
            3) Создать классы конкретных итераторов для тех коллекций,
               которые нужно обходить с помощью паттерна.
               Итератор должен быть привязан только к одному объекту коллекции.
               Обычно эта связь устанавливается через конструктор.
            4) Реализовать методы получения итератора в конкретных классах коллекций.
               Они должны создавать новый итератор того класса, который способен
               работать с данным типом коллекции. Коллекция должна передавать
               ссылку на собственный объект в конструктор итератора
            5) В клиентском коде и в классах коллекций не должно остаться кода обхода элементов.
               Клиент должен получать новый итератор из объекта коллекции каждый раз,
               когда ему нужно перебрать её элементы.

           Применимость:
            1) Когда  есть сложная структура данных,
               и нужно скрыть от клиента детали её реализации
               (из-за сложности или вопросов безопасности).
            2) Когда нужно иметь несколько вариантов обхода одной и той же структуры данных.
            3) Когда необходимо иметь единый интерфейс обхода различных структур данных.

