
           Паттерн "Посредник":
           Цель: Создать интерфейс, который позволяет уменьшить связанность
                 множества классов между собой, благодаря перемещению
                 этих связей в один класс-посредник.

           Реализация паттерна "Посредник":
            1) Определить группу тесно переплетённых классов, отвязав которые друг от друга,
               можно получить некоторую пользу.
               Например, чтобы повторно использовать их код в другой программе.
            2) Создать общий интерфейс посредников и описать в нём методы
               для взаимодействия с компонентами. В простейшем случае достаточно
               одного метода для получения оповещений от компонентов.
               2.1) Этот интерфейс необходим, если необходимо повторно использовать классы
                    компонентов для других задач. В этом случае всё,
                    что нужно сделать — это создать новый класс конкретного посредника.
            3) Реализовать этот интерфейс в классе конкретного посредника.
               Поместить в него поля, которые будут содержать ссылки на все объекты компонентов.
            4) Можно переместить код создания компонентов в класс посредника,
               после чего он может напоминать фабрику или фасад.
            5) Компоненты тоже должны иметь ссылку на объект посредника.
               Связь между ними удобнее всего установить, подавая посредника
               в параметры конструктора компонентов.
            6) Изменить код компонентов так, чтобы они вызывали метод оповещения посредника,
               вместо методов других компонентов. С противоположной стороны, посредник должен
               вызывать методы нужного компонента, когда получает оповещение от компонента.

           Применимость:
            1) Когда вам сложно менять некоторые классы из-за того,
               что они имеют множество хаотичных связей с другими классами.
               1.1) Посредник позволяет поместить все эти связи в один класс,
                    после чего будет легче их отрефакторить, сделать более понятными и гибкими.
            2) Когда нельзя повторно использовать класс, поскольку он зависит от уймы других классов.
               2.1) После применения паттерна компоненты теряют прежние связи с другими компонентами,
                    а всё их общение происходит косвенно, через объект-посредник.
            3) Когда приходится создавать множество подклассов компонентов,
               чтобы использовать одни и те же компоненты в разных контекстах.
               3.1) Если раньше изменение отношений в одном компоненте могли повлечь за собой лавину
                    изменений во всех остальных компонентах, то теперь вам достаточно создать подкласс
                    посредника и поменять в нём связи между компонентами.

