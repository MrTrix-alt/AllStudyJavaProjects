
           Паттерн "Состояние":
           Цель: Управление подевением объекта в зависимости от его состояния.

           Реализация паттерна "Команда":
            1) Определить класс, который будет играть роль контекста.
               Это может быть как существующий класс, в котором уже есть зависимость от состояния,
               так и новый класс, если код состояний размазан по нескольким классам.
            2) Создать общий интерфейс состояний. Он должен описывать методы, общие для всех состояний,
               обнаруженных в контексте. Не всё поведение контекста нужно переносить в состояние,
               а только то, которое зависит от состояний.
            3) Для каждого фактического состояния создать класс, реализующий интерфейс состояния.
               Переместите код, связанный с конкретными состояниями в нужные классы.
               В конце концов, все методы интерфейса состояния должны быть реализованы во всех классах состояний.
               3.1) При переносе поведения из контекста можно столкнуться с тем, что это поведение зависит
                    от приватных полей или методов контекста, к которым нет доступа из объекта состояния.
               3.2) Можно сделать классы состояний вложенными в класс контекста,
                    и тогда они получат доступ ко всем приватным частям контекста. (решение на Java)
            4) Создайть в контексте поле для хранения объектов-состояний,
               а также публичный метод для изменения значения этого поля.
            5) Старые методы контекста, в которых находился зависимый от состояния код,
               заменить на вызовы соответствующих методов объекта-состояния.
            6) В зависимости от бизнес-логики, разместить код,
               который переключает состояние контекста либо внутри контекста,
               либо внутри классов конкретных состояний.

           Применимость:
            1) Когда есть объект, поведение которого кардинально меняется в зависимости
               от внутреннего состояния, причём типов состояний много, и их код часто меняется.
               1.1) Паттерн предлагает выделить в собственные классы все поля и методы,
                    связанные с определёнными состояниями. Первоначальный объект будет
                    постоянно ссылаться на один из объектов-состояний, делегируя ему часть своей работы.
                    Для изменения состояния в контекст достаточно будет подставить другой объект-состояние.
            2) Когда код класса содержит множество больших, похожих друг на друга, условных операторов,
               которые выбирают поведения в зависимости от текущих значений полей класса.
               2.3) Паттерн предлагает переместить каждую ветку такого условного оператора в собственный класс.
                    Тут же можно поселить и все поля, связанные с данным состоянием.
            3) Когда используем табличную машину состояний, построенную на условных операторах,
               но вынуждены мириться с дублированием кода для похожих состояний и переходов.
               3.1) Паттерн Состояние позволяет реализовать иерархическую машину состояний,
                    базирующуюся на наследовании. Можно отнаследовать похожие состояния от одного родительского класса
                    и вынести туда весь дублирующий код.

