
           Паттерн "Стратегия":
           Цель: Взаимозаменяемость семейства классов.

           Реализация паттерна "Стратегия":
            1) Определить алгоритм, который подвержен частым изменениям.
               Также подойдёт алгоритм, имеющий несколько вариаций, которые выбираются
               во время выполнения программы.
            2) Создать интерфейс стратегий, описывающий этот алгоритм.
               Он должен быть общим для всех вариантов алгоритма.
            3) Поместить вариации алгоритма в собственные классы,
               которые реализуют этот интерфейс.
            4) В классе контекста создать поле для хранения ссылки на текущий объект-стратегию,
               а также метод для её изменения. Убедится в том, что контекст работает
               с этим объектом только через общий интерфейс стратегий.
            5) Клиенты контекста должны подавать в него соответствующий объект-стратегию,
               когда хотят, чтобы контекст вёл себя определённым образом.

           Применимость:
            1) Когда нужно использовать разные вариации какого-то алгоритма внутри одного объекта.
               1.1) Стратегия позволяет варьировать поведение объекта во время выполнения программы,
                    подставляя в него различные объекты-поведения
                    (например, отличающиеся балансом скорости и потребления ресурсов).
            2) Когда есть множество похожих классов, отличающихся только некоторым поведением.
               2.1)  Стратегия позволяет вынести отличающееся поведение в отдельную иерархию классов,
                     а затем свести первоначальные классы к одному, сделав поведение этого класса настраиваемым.
            3) Когда не нужно обнажать детали реализации алгоритмов для других классов.
               3.1) Стратегия позволяет изолировать код, данные и зависимости алгоритмов от других объектов,
                    скрыв эти детали внутри классов-стратегий.
            4) Когда различные вариации алгоритмов реализованы в виде развесистого условного оператора.
               Каждая ветка такого оператора представляет собой вариацию алгоритма.
               4.1) Стратегия помещает каждую лапу такого оператора в отдельный класс-стратегию.
                    Затем контекст получает определённый объект-стратегию от клиента и делегирует ему работу.
                    Если вдруг понадобится сменить алгоритм, в контекст можно подать другую стратегию.

